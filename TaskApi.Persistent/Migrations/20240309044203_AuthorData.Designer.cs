// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskApi.Persistent;

#nullable disable

namespace TaskApi.Persistent.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    [Migration("20240309044203_AuthorData")]
    partial class AuthorData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskApi.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tharindu"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pasan"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Namal"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kamal"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ruwan"
                        });
                });

            modelBuilder.Entity("TaskApi.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2024, 3, 9, 10, 12, 2, 789, DateTimeKind.Local).AddTicks(9450),
                            Description = "This is task from DB",
                            Status = 0,
                            Title = "Task 1",
                            UpdatedDate = new DateTime(2024, 3, 10, 10, 12, 2, 789, DateTimeKind.Local).AddTicks(9469)
                        });
                });

            modelBuilder.Entity("TaskApi.Models.Todo", b =>
                {
                    b.HasOne("TaskApi.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
